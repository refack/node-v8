// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module test {

macro ElementsKindTestHelper1(kind: constexpr ElementsKind): bool {
  if constexpr ((kind == UINT8_ELEMENTS) || (kind == UINT16_ELEMENTS)) {
    return true;
  } else {
    return false;
  }
}

macro ElementsKindTestHelper2(kind: constexpr ElementsKind): bool {
  return ((kind == UINT8_ELEMENTS) || (kind == UINT16_ELEMENTS));
}

macro ElementsKindTestHelper3(kind: constexpr ElementsKind): constexpr bool {
  return ((kind == UINT8_ELEMENTS) || (kind == UINT16_ELEMENTS));
}

macro LabelTestHelper1(): never
labels Label1 {
  goto Label1;
}

macro LabelTestHelper2(): never
labels Label2(Smi) {
  goto Label2(42);
}

macro LabelTestHelper3(): never
labels Label3(String, Smi) {
  goto Label3('foo', 7);
}

macro TestConstexpr1() {
  assert(convert<bool>(IsFastElementsKind(PACKED_SMI_ELEMENTS)));
}

macro TestConstexprIf() {
  assert(ElementsKindTestHelper1(UINT8_ELEMENTS));
  assert(ElementsKindTestHelper1(UINT16_ELEMENTS));
  assert(!ElementsKindTestHelper1(UINT32_ELEMENTS));
}

macro TestConstexprReturn() {
  assert(convert<bool>(ElementsKindTestHelper3(UINT8_ELEMENTS)));
  assert(convert<bool>(ElementsKindTestHelper3(UINT16_ELEMENTS)));
  assert(!convert<bool>(ElementsKindTestHelper3(UINT32_ELEMENTS)));
  assert(convert<bool>(!ElementsKindTestHelper3(UINT32_ELEMENTS)));
}

macro TestGotoLabel(): Boolean {
  try {
    LabelTestHelper1() otherwise Label1;
  }
  label Label1 {
    return True;
  }
}

macro TestGotoLabelWithOneParameter(): Boolean {
  try {
    LabelTestHelper2() otherwise Label2;
  }
  label Label2(smi: Smi) {
    assert(smi == 42);
    return True;
  }
}

macro TestGotoLabelWithTwoParameters(): Boolean {
  try {
    LabelTestHelper3() otherwise Label3;
  }
  label Label3(str: String, smi: Smi) {
    assert(str == 'foo');
    assert(smi == 7);
    return True;
  }
}

macro LabelTestHelper4(flag: constexpr bool): never labels Label4, Label5 {
  if constexpr (flag) goto Label4;
  else goto Label5;
}

macro CallLabelTestHelper4(flag: constexpr bool): bool {
  try {
    LabelTestHelper4(flag) otherwise Label4, Label5;
  }
  label Label4 {
    return true;
  }
  label Label5 {
    return false;
  }
}

macro TestPartiallyUnusedLabel(): Boolean {
  let r1: bool = CallLabelTestHelper4(true);
  let r2: bool = CallLabelTestHelper4(false);

  if (r1 && !r2) return True;
  else return False;
}

}
